args[0] = -l
args[1] = -refine
args[3] = -transfer
args[5] = -train
args[7] = -target
args[9] = -trees

% Starting a LEARNING run of bRDN.

% Calling SETUP.
% Running on host: C02DX2QHML7H

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

Resetting the LazyGroundNthArgumentClauseIndex.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null
% Load '../background.txt'.

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****


***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 9.016 facts.
% Have read 771 examples from 'train' [train/train*].
% Have read 1.542 examples from 'train' [train/train*].

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.

% NEW target:                 samevenue(D, E)
%  targetPred:                samevenue/2
%  targetArgTypes:            signature = [const, const], types = [+venue, +venue]
%  targets:                   [samevenue(D, E)]
%  targetPredicates:          [samevenue/2]
%  targetArgSpecs:            [[D[+venue], E[+venue]]]
%  variablesInTargets:        [[D, E]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 86 milliseconds
% Time to collect examples: 0 seconds

% Read 771 pos examples and 1.542 neg examples.
% Time to init learnOneClause: 104 milliseconds
% Old dirnull
Setting model dir

% Have 771 'raw' positive examples and kept 771.
% Have 1.542 'raw' negative examples and kept 1.542.

% processing backup's for samevenue
%  POS EX = 771
%  NEG EX = 1.542

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded
% Learning 10 trees in this iteration for samevenue

% Learn model for: samevenue
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2222222222222222
Set score:0.0025
% Dataset size: 2.313
Computing probabilities
prob time:7 milliseconds
No hidden examples for : samevenue
Time to build dataset: 10 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222224683
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 185 699 1211 1235 1293 1423 1539 1551 1669 1730

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor01, director01]
% Number of legal mappings: 1
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for venue/2.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
% [ LazyGroundClauseIndex ]  Building full index for venue/2 with 267 assertions.
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 0;
Comparing variance: 1.9315724855614373E-15 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872525016 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 360 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 23:42:55 6/16/21.  [Using 6.276.368 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1604113785384213;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.8581489350995112) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1604113785384213) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.8581489350995112) :-  /* #pos=103 */ 
   venue(uniqueVar1, a),
   venue(uniqueVar1, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1604113785384213) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar1, b)
%   venue(uniqueVar1, a)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 1 trees is 509 milliseconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.22222222222224683
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:69 milliseconds
No hidden examples for : samevenue
Time to build dataset: 245 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21580818910534522
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 58 354 651 843 1065 1237 1728 1956 1966

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor11, director11]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 1;
Comparing variance: -3.4492365813597096E-16 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872525352 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 176 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 23:42:56 6/16/21.  [Using 6.756.040 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13974139673934424;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.7194734122109546) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.13974139673934424) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.7194734122109546) :-  /* #pos=103 */ 
   venue(uniqueVar2, a),
   venue(uniqueVar2, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.13974139673934424) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar2, a)
%   venue(uniqueVar2, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 2 trees is 1,077 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.21580818910534522
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:63 milliseconds
No hidden examples for : samevenue
Time to build dataset: 135 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20957988135713865
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 24 41 589 663 1574 1652 1798 1836 2019 2077

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor21, director21]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 2;
Comparing variance: 1.793603022307049E-15 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872524566 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 101 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 23:42:56 6/16/21.  [Using 7.212.800 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1198141326364051;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.5553664367462834) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1198141326364051) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.5553664367462834) :-  /* #pos=103 */ 
   venue(uniqueVar3, a),
   venue(uniqueVar3, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1198141326364051) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar3, b)
%   venue(uniqueVar3, a)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 3 trees is 1,456 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20957988135713865
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:71 milliseconds
No hidden examples for : samevenue
Time to build dataset: 177 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20576381483545356
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 122 457 989 1294 1347 1687 1692 1912 2181 2289

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor31, director31]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 3;
Comparing variance: 6.553549504583448E-16 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872525172 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 72 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 23:42:56 6/16/21.  [Using 7.608.960 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1012587583697945;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.4175135841583097) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1012587583697945) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.4175135841583097) :-  /* #pos=103 */ 
   venue(uniqueVar4, a),
   venue(uniqueVar4, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1012587583697945) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar4, a)
%   venue(uniqueVar4, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 4 trees is 1,833 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20576381483545356
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:72 milliseconds
No hidden examples for : samevenue
Time to build dataset: 124 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2038822297852131
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 116 210 284 604 606 994 1053 1147 1423 1455

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor41, director41]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 4;
Comparing variance: -2.4144656069517967E-16 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872523537 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 65 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 23:42:57 6/16/21.  [Using 7.987.744 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.08450351211786913;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.32071184716015033) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.08450351211786913) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.32071184716015033) :-  /* #pos=103 */ 
   venue(uniqueVar5, a),
   venue(uniqueVar5, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.08450351211786913) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar5, a)
%   venue(uniqueVar5, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 5 trees is 2,124 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.2038822297852131
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:107 milliseconds
No hidden examples for : samevenue
Time to build dataset: 203 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20297089281498976
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 9 177 190 523 603 619 652 1726

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor51, director51]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 5;
Comparing variance: -5.1738548720395646E-17 to score=0.0025 #egs=103.0
Comparing variance: 0.2108998587252537 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 45 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 23:42:57 6/16/21.  [Using 8.389.088 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.06976647038402382;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.2551722425694897) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.06976647038402382) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.2551722425694897) :-  /* #pos=103 */ 
   venue(uniqueVar6, a),
   venue(uniqueVar6, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.06976647038402382) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar6, a)
%   venue(uniqueVar6, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 6 trees is 2,487 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20297089281498976
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:178 milliseconds
No hidden examples for : samevenue
Time to build dataset: 278 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20250003379551113
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 9 43 121 713 744 865 868 1153 1689 1906

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [actor61, director61]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 6;
Comparing variance: 2.0695419488158259E-16 to score=0.0025 #egs=103.0
Comparing variance: 0.2108998587252581 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 131 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 23:42:58 6/16/21.  [Using 8.767.272 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057085714600028016;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.2097577156325356) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.057085714600028016) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.2097577156325356) :-  /* #pos=103 */ 
   venue(uniqueVar7, a),
   venue(uniqueVar7, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.057085714600028016) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar7, a)
%   venue(uniqueVar7, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 7 trees is 3,036 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20250003379551113
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:86 milliseconds
No hidden examples for : samevenue
Time to build dataset: 231 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20223543524367057
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 492 753 956 1048 1531 1954

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [director71, actor71]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 7;
Comparing variance: 2.5869274360197823E-17 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872525185 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 62 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 23:42:58 6/16/21.  [Using 9.180.256 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.04636814545182876;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.1770964977452773) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.04636814545182876) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.1770964977452773) :-  /* #pos=103 */ 
   venue(uniqueVar8, a),
   venue(uniqueVar8, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.04636814545182876) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar8, b)
%   venue(uniqueVar8, a)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 8 trees is 3,593 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20223543524367057
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:143 milliseconds
No hidden examples for : samevenue
Time to build dataset: 200 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20207397300080723
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 152 444 530 562 928 1350 1397 1509 1770

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [director81, actor81]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 8;
Comparing variance: -1.2503482607428947E-16 to score=0.0025 #egs=103.0
Comparing variance: 0.21089985872525693 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 50 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 23:42:59 6/16/21.  [Using 9.558.728 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0374396153344702;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.1527438580936713) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.0374396153344702) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.1527438580936713) :-  /* #pos=103 */ 
   venue(uniqueVar9, a),
   venue(uniqueVar9, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.0374396153344702) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar9, b)
%   venue(uniqueVar9, a)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Time taken to learn 9 trees is 4,128 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20207397300080723
Set score:0.0025
% Only 2313 out of 2313 converged.
% Kept 771 of the 771 positive examples.
% Kept 1.542 of the 1.542 negative examples.
% Dataset size: 2.313
Computing probabilities
prob time:113 milliseconds
No hidden examples for : samevenue
Time to build dataset: 160 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1,797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1,797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.20196779035355222
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 9 positive seeds: 73 103 122 639 791 1251 1574 1894 2051

% The best node found: null

% target           = samevenue(D, E)
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2E-7) for clause:  samevenue(_, _).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]

% Finding mapping for predicates: [director91, actor91]
% Number of legal mappings: 1
%     Score = -Infinity (regressionFit = Infinity, penalties=1.23E-6) for clause:  samevenue(A, _) :- venue(_, A).  [covers 2.313,0/2.313,0 pos, 0,0/0,0 neg]
%     Score = -466,088690 (regressionFit = 466,088688, penalties=1.93E-6) for clause:  samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% The best node found: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]

% Expanding node at Level 0 with score = 1,797693e+308.
% Will extend: samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% Path: 9;
Comparing variance: 4.527123013034619E-17 to score=0.0025 #egs=103.0
Comparing variance: 0.2108998587252526 to score=0.0025 #egs=2210.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025

% Time for loop #1: 38 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 3
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      samevenue(A, B) :- venue(C, A), venue(C, B).  [covers 103,0/2.313,0 pos, 0,0/0,0 neg]
% This clause covers 103 positive examples, of which 103 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 23:42:59 6/16/21.  [Using 9.936.968 memory cells.]  %%%%%


% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.030086548621736;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.13400703000801087) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.030086548621736) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.13400703000801087) :-  /* #pos=103 */ 
   venue(uniqueVar10, a),
   venue(uniqueVar10, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.030086548621736) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar10, a)
%   venue(uniqueVar10, b)

% Saving model in: train/models/bRDNs/samevenue.model.ckpt
% Saving model in: train/models/bRDNs/samevenue.model


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for samevenue.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
samevenue(D, E, Total) :- // A general accessor. 
   samevenue(D, E, 1000000, Total), !.
samevenue(D, E, Total) :- waitHere("This should not fail", samevenue(D, E, Total)).

samevenue(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_samevenue_tree1(D, E, TreesToUse, Total1),
   getScore_samevenue_tree2(D, E, TreesToUse, Total2),
   getScore_samevenue_tree3(D, E, TreesToUse, Total3),
   getScore_samevenue_tree4(D, E, TreesToUse, Total4),
   getScore_samevenue_tree5(D, E, TreesToUse, Total5),
   getScore_samevenue_tree6(D, E, TreesToUse, Total6),
   getScore_samevenue_tree7(D, E, TreesToUse, Total7),
   getScore_samevenue_tree8(D, E, TreesToUse, Total8),
   getScore_samevenue_tree9(D, E, TreesToUse, Total9),
   getScore_samevenue_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
samevenue(D, E, TreesToUse, Total) :- waitHere("This should not fail", samevenue(D, E, TreesToUse, Total)).

getScore_samevenue_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_samevenue_tree1(D, E, TreesToUse, Total1) :- samevenue_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_samevenue_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_samevenue_tree2(D, E, TreesToUse, Total2) :- samevenue_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_samevenue_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_samevenue_tree3(D, E, TreesToUse, Total3) :- samevenue_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_samevenue_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_samevenue_tree4(D, E, TreesToUse, Total4) :- samevenue_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_samevenue_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_samevenue_tree5(D, E, TreesToUse, Total5) :- samevenue_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_samevenue_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_samevenue_tree6(D, E, TreesToUse, Total6) :- samevenue_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_samevenue_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_samevenue_tree7(D, E, TreesToUse, Total7) :- samevenue_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_samevenue_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_samevenue_tree8(D, E, TreesToUse, Total8) :- samevenue_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_samevenue_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_samevenue_tree9(D, E, TreesToUse, Total9) :- samevenue_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_samevenue_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_samevenue_tree10(D, E, TreesToUse, Total10) :- samevenue_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(samevenue, 20, [
   venue(uniqueVar5, a),
   venue(uniqueVar10, b),
   venue(uniqueVar7, b),
   venue(uniqueVar2, b),
   venue(uniqueVar6, b),
   venue(uniqueVar1, a),
   venue(uniqueVar7, a),
   venue(uniqueVar3, a),
   venue(uniqueVar2, a),
   venue(uniqueVar4, a),
   venue(uniqueVar8, b),
   venue(uniqueVar9, b),
   venue(uniqueVar10, a),
   venue(uniqueVar5, b),
   venue(uniqueVar3, b),
   venue(uniqueVar4, b),
   venue(uniqueVar9, a),
   venue(uniqueVar6, a),
   venue(uniqueVar1, b),
   venue(uniqueVar8, a)]).
% Time taken to learn model for 'samevenue': 4,516 seconds.
% Saving model in: train/models/bRDNs/samevenue.model
cached groundings hit: 0
Misses: 0

% Total learning time (10 trees): 5,397 seconds.
