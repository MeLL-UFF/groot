usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 2.313
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 23:42:55 6/16/21.  [Using 6.276.368 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1604113785384213;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.8581489350995112) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1604113785384213) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.8581489350995112) :-  /* #pos=103 */ 
   venue(uniqueVar1, a),
   venue(uniqueVar1, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1604113785384213) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar1, b)
%   venue(uniqueVar1, a)

%%%%%  WILL-Produced Tree #2 @ 23:42:56 6/16/21.  [Using 6.756.040 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13974139673934424;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.7194734122109546) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.13974139673934424) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.7194734122109546) :-  /* #pos=103 */ 
   venue(uniqueVar2, a),
   venue(uniqueVar2, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.13974139673934424) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar2, a)
%   venue(uniqueVar2, b)

%%%%%  WILL-Produced Tree #3 @ 23:42:56 6/16/21.  [Using 7.212.800 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4,30e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1198141326364051;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.5553664367462834) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1198141326364051) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.5553664367462834) :-  /* #pos=103 */ 
   venue(uniqueVar3, a),
   venue(uniqueVar3, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1198141326364051) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar3, b)
%   venue(uniqueVar3, a)

%%%%%  WILL-Produced Tree #4 @ 23:42:56 6/16/21.  [Using 7.608.960 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2,60e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.1012587583697945;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.4175135841583097) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1012587583697945) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.4175135841583097) :-  /* #pos=103 */ 
   venue(uniqueVar4, a),
   venue(uniqueVar4, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1012587583697945) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar4, a)
%   venue(uniqueVar4, b)

%%%%%  WILL-Produced Tree #5 @ 23:42:57 6/16/21.  [Using 7.987.744 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.08450351211786913;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.32071184716015033) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.08450351211786913) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.32071184716015033) :-  /* #pos=103 */ 
   venue(uniqueVar5, a),
   venue(uniqueVar5, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.08450351211786913) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar5, a)
%   venue(uniqueVar5, b)

%%%%%  WILL-Produced Tree #6 @ 23:42:57 6/16/21.  [Using 8.389.088 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.06976647038402382;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.2551722425694897) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.06976647038402382) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.2551722425694897) :-  /* #pos=103 */ 
   venue(uniqueVar6, a),
   venue(uniqueVar6, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.06976647038402382) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar6, a)
%   venue(uniqueVar6, b)

%%%%%  WILL-Produced Tree #7 @ 23:42:58 6/16/21.  [Using 8.767.272 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1,46e-07, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057085714600028016;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.2097577156325356) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.057085714600028016) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.2097577156325356) :-  /* #pos=103 */ 
   venue(uniqueVar7, a),
   venue(uniqueVar7, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.057085714600028016) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar7, a)
%   venue(uniqueVar7, b)

%%%%%  WILL-Produced Tree #8 @ 23:42:58 6/16/21.  [Using 9.180.256 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5,16e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.04636814545182876;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.1770964977452773) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.04636814545182876) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.1770964977452773) :-  /* #pos=103 */ 
   venue(uniqueVar8, a),
   venue(uniqueVar8, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.04636814545182876) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar8, b)
%   venue(uniqueVar8, a)

%%%%%  WILL-Produced Tree #9 @ 23:42:59 6/16/21.  [Using 9.558.728 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0374396153344702;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.1527438580936713) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.0374396153344702) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.1527438580936713) :-  /* #pos=103 */ 
   venue(uniqueVar9, a),
   venue(uniqueVar9, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.0374396153344702) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar9, b)
%   venue(uniqueVar9, a)

%%%%%  WILL-Produced Tree #10 @ 23:42:59 6/16/21.  [Using 9.936.968 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6,83e-08, 103,000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.030086548621736;  // std dev = 21,589, 2.210,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=668 */


% Clauses:

samevenue(A, B, 0.13400703000801087) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.030086548621736) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.13400703000801087) :-  /* #pos=103 */ 
   venue(uniqueVar10, a),
   venue(uniqueVar10, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.030086548621736) :-  /* #neg=1.542 #pos=668 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar10, a)
%   venue(uniqueVar10, b)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for samevenue.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
samevenue(D, E, Total) :- // A general accessor. 
   samevenue(D, E, 1000000, Total), !.
samevenue(D, E, Total) :- waitHere("This should not fail", samevenue(D, E, Total)).

samevenue(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_samevenue_tree1(D, E, TreesToUse, Total1),
   getScore_samevenue_tree2(D, E, TreesToUse, Total2),
   getScore_samevenue_tree3(D, E, TreesToUse, Total3),
   getScore_samevenue_tree4(D, E, TreesToUse, Total4),
   getScore_samevenue_tree5(D, E, TreesToUse, Total5),
   getScore_samevenue_tree6(D, E, TreesToUse, Total6),
   getScore_samevenue_tree7(D, E, TreesToUse, Total7),
   getScore_samevenue_tree8(D, E, TreesToUse, Total8),
   getScore_samevenue_tree9(D, E, TreesToUse, Total9),
   getScore_samevenue_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
samevenue(D, E, TreesToUse, Total) :- waitHere("This should not fail", samevenue(D, E, TreesToUse, Total)).

getScore_samevenue_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_samevenue_tree1(D, E, TreesToUse, Total1) :- samevenue_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_samevenue_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_samevenue_tree2(D, E, TreesToUse, Total2) :- samevenue_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_samevenue_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_samevenue_tree3(D, E, TreesToUse, Total3) :- samevenue_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_samevenue_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_samevenue_tree4(D, E, TreesToUse, Total4) :- samevenue_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_samevenue_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_samevenue_tree5(D, E, TreesToUse, Total5) :- samevenue_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_samevenue_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_samevenue_tree6(D, E, TreesToUse, Total6) :- samevenue_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_samevenue_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_samevenue_tree7(D, E, TreesToUse, Total7) :- samevenue_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_samevenue_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_samevenue_tree8(D, E, TreesToUse, Total8) :- samevenue_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_samevenue_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_samevenue_tree9(D, E, TreesToUse, Total9) :- samevenue_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_samevenue_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_samevenue_tree10(D, E, TreesToUse, Total10) :- samevenue_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(samevenue, 20, [
   venue(uniqueVar5, a),
   venue(uniqueVar10, b),
   venue(uniqueVar7, b),
   venue(uniqueVar2, b),
   venue(uniqueVar6, b),
   venue(uniqueVar1, a),
   venue(uniqueVar7, a),
   venue(uniqueVar3, a),
   venue(uniqueVar2, a),
   venue(uniqueVar4, a),
   venue(uniqueVar8, b),
   venue(uniqueVar9, b),
   venue(uniqueVar10, a),
   venue(uniqueVar5, b),
   venue(uniqueVar3, b),
   venue(uniqueVar4, b),
   venue(uniqueVar9, a),
   venue(uniqueVar6, a),
   venue(uniqueVar1, b),
   venue(uniqueVar8, a)]).
