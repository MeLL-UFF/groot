usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 774
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 11:15:32 6/14/21.  [Using 7.120.944 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( companyeconomicsector(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( bankboughtbank(D, A), bankboughtbank(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.19148226843284097;  // std dev = 13,115, 774,000 (wgt'ed) examples reached here.  /* #neg=516 #pos=258 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     !. // Clause #1.

companyeconomicsector(A, B, 0) :- 
     bankboughtbank(C, A), 
     bankboughtbank(A, D), 
     !. // Clause #2.

companyeconomicsector(A, B, 0.19148226843284097) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(underscore, a),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, underscore, 0) :- 
   bankboughtbank(underscore, a),
   bankboughtbank(a, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(underscore, underscore, 0.19148226843284097) :-  /* #neg=516 #pos=258 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   companyeconomicsector(underscore, a)
%   bankboughtbank(underscore, a)
%   bankboughtbank(a, underscore)

%%%%%  WILL-Produced Tree #2 @ 11:15:32 6/14/21.  [Using 7.400.584 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( economicsectorcompany(B, C), companyalsoknownas(C, D) )
%   then if ( companyalsoknownas(C, E) )
%   | then if ( bankboughtbank(A, F), bankboughtbank(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.7169264214641092;  // std dev = 5,149, 258,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=228 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( bankboughtbank(H, A), acquired(I, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.1086549738847309;  // std dev = 5,316, 516,000 (wgt'ed) examples reached here.  /* #neg=486 #pos=30 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(C, E), 
     bankboughtbank(A, F), 
     bankboughtbank(F, G), 
     !. // Clause #1.

companyeconomicsector(A, B, 0.7169264214641092) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(C, E), 
     !. // Clause #2.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     !. // Clause #3.

companyeconomicsector(A, B, 0) :- 
     bankboughtbank(C, A), 
     acquired(D, C), 
     !. // Clause #4.

companyeconomicsector(A, B, -0.1086549738847309) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar1),
   companyalsoknownas(uniqueVar1, underscore),
   companyalsoknownas(uniqueVar1, underscore),
   bankboughtbank(a, uniqueVar2),
   bankboughtbank(uniqueVar2, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(underscore, a, 0.7169264214641092) :-  /* #neg=30 #pos=228 */ 
   economicsectorcompany(a, uniqueVar3),
   companyalsoknownas(uniqueVar3, underscore),
   companyalsoknownas(uniqueVar3, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(underscore, a, 0) :- 
   economicsectorcompany(a, uniqueVar4),
   companyalsoknownas(uniqueVar4, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(a, underscore, 0) :- 
   bankboughtbank(uniqueVar5, a),
   acquired(underscore, uniqueVar5),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(underscore, underscore, -0.1086549738847309) :-  /* #neg=486 #pos=30 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   economicsectorcompany(b, uniqueVar1)
%   bankboughtbank(uniqueVar2, underscore)
%   economicsectorcompany(a, uniqueVar4)
%   bankboughtbank(a, uniqueVar2)
%   acquired(underscore, uniqueVar5)
%   companyalsoknownas(uniqueVar3, underscore)
%   bankboughtbank(uniqueVar5, a)
%   economicsectorcompany(a, uniqueVar3)
%   companyalsoknownas(uniqueVar1, underscore)
%   companyalsoknownas(uniqueVar4, underscore)

%%%%%  WILL-Produced Tree #3 @ 11:15:33 6/14/21.  [Using 7.790.832 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( economicsectorcompany(B, C), bankboughtbank(C, D) )
%   then if ( bankboughtbank(C, E), companyalsoknownas(A, F) )
%   | then if ( companyalsoknownas(E, F), companyalsoknownas(E, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( acquired(C, E), acquired(E, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7092184539167657;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.697305954303686;  // std dev = 1,428, 133,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=131 */
%   else if ( companyeconomicsector(I, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( companyalsoknownas(J, A), bankboughtbank(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.011697227617138465;  // std dev = 8,957, 635,000 (wgt'ed) examples reached here.  /* #neg=514 #pos=121 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(C, E), 
     companyalsoknownas(A, F), 
     companyalsoknownas(E, F), 
     companyalsoknownas(E, G), 
     !. // Clause #1.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(C, E), 
     companyalsoknownas(A, F), 
     acquired(C, E), 
     acquired(E, G), 
     !. // Clause #2.

companyeconomicsector(A, B, 0.7092184539167657) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(C, E), 
     companyalsoknownas(A, F), 
     !. // Clause #3.

companyeconomicsector(A, B, 0.697305954303686) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     !. // Clause #4.

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     !. // Clause #5.

companyeconomicsector(A, B, 0) :- 
     companyalsoknownas(C, A), 
     bankboughtbank(D, C), 
     !. // Clause #6.

companyeconomicsector(A, B, 0.011697227617138465) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar6),
   bankboughtbank(uniqueVar6, underscore),
   bankboughtbank(uniqueVar6, uniqueVar7),
   companyalsoknownas(a, uniqueVar8),
   companyalsoknownas(uniqueVar7, uniqueVar8),
   companyalsoknownas(uniqueVar7, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar9),
   bankboughtbank(uniqueVar9, underscore),
   bankboughtbank(uniqueVar9, uniqueVar10),
   companyalsoknownas(a, underscore),
   acquired(uniqueVar9, uniqueVar10),
   acquired(uniqueVar10, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, b, 0.7092184539167657) :-  /* #pos=6 */ 
   economicsectorcompany(b, uniqueVar11),
   bankboughtbank(uniqueVar11, underscore),
   bankboughtbank(uniqueVar11, underscore),
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(underscore, a, 0.697305954303686) :-  /* #neg=2 #pos=131 */ 
   economicsectorcompany(a, uniqueVar12),
   bankboughtbank(uniqueVar12, underscore),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(underscore, a),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(a, underscore, 0) :- 
   companyalsoknownas(uniqueVar13, a),
   bankboughtbank(underscore, uniqueVar13),
   !. // Flattened version of clause #6.

flattened_companyeconomicsector(underscore, underscore, 0.011697227617138465) :-  /* #neg=514 #pos=121 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   bankboughtbank(uniqueVar6, underscore)
%   bankboughtbank(uniqueVar9, uniqueVar10)
%   economicsectorcompany(b, uniqueVar11)
%   companyalsoknownas(uniqueVar13, a)
%   economicsectorcompany(a, uniqueVar12)
%   bankboughtbank(uniqueVar12, underscore)
%   companyalsoknownas(a, uniqueVar8)
%   companyalsoknownas(uniqueVar7, uniqueVar8)
%   bankboughtbank(uniqueVar6, uniqueVar7)
%   bankboughtbank(uniqueVar9, underscore)
%   economicsectorcompany(b, uniqueVar6)
%   companyeconomicsector(underscore, a)
%   bankboughtbank(underscore, uniqueVar13)
%   companyalsoknownas(uniqueVar7, underscore)
%   bankboughtbank(uniqueVar11, underscore)
%   economicsectorcompany(b, uniqueVar9)
%   acquired(uniqueVar10, underscore)
%   companyalsoknownas(a, underscore)
%   acquired(uniqueVar9, uniqueVar10)

%%%%%  WILL-Produced Tree #4 @ 11:15:33 6/14/21.  [Using 8.083.872 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( companyeconomicsector(C, B), companyalsoknownas(C, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( acquired(A, E) )
%   | then return 0.16685040789216488;  // std dev = 3,314, 62,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
%   | else if ( companyalsoknownas(A, F), companyalsoknownas(F, A) )
%   | | then if ( companyalsoknownas(A, G) )
%   | | | then return 0.06732980272980398;  // std dev = 2,788, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( acquired(H, A) )
%   | | | then return 0.1076901552392248;  // std dev = 2,925, 53,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
%   | | | else return 0.10178006293773627;  // std dev = 9,293, 601,000 (wgt'ed) examples reached here.  /* #neg=400 #pos=201 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     companyalsoknownas(C, D), 
     !. // Clause #1.

companyeconomicsector(A, B, 0.16685040789216488) :- 
     acquired(A, C), 
     !. // Clause #2.

companyeconomicsector(A, B, 0.06732980272980398) :- 
     companyalsoknownas(A, C), 
     companyalsoknownas(C, A), 
     companyalsoknownas(A, D), 
     !. // Clause #3.

companyeconomicsector(A, B, 0) :- 
     companyalsoknownas(A, C), 
     companyalsoknownas(C, A), 
     !. // Clause #4.

companyeconomicsector(A, B, 0.1076901552392248) :- 
     acquired(C, A), 
     !. // Clause #5.

companyeconomicsector(A, B, 0.10178006293773627) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(uniqueVar14, a),
   companyalsoknownas(uniqueVar14, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, underscore, 0.16685040789216488) :-  /* #neg=38 #pos=24 */ 
   acquired(a, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, underscore, 0.06732980272980398) :-  /* #neg=42 #pos=16 */ 
   companyalsoknownas(a, uniqueVar15),
   companyalsoknownas(uniqueVar15, a),
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(a, underscore, 0) :- 
   companyalsoknownas(a, uniqueVar16),
   companyalsoknownas(uniqueVar16, a),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(a, underscore, 0.1076901552392248) :-  /* #neg=36 #pos=17 */ 
   acquired(underscore, a),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(underscore, underscore, 0.10178006293773627) :-  /* #neg=400 #pos=201 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   companyalsoknownas(a, uniqueVar16)
%   companyeconomicsector(uniqueVar14, a)
%   companyalsoknownas(uniqueVar14, underscore)
%   acquired(a, underscore)
%   companyalsoknownas(uniqueVar16, a)
%   acquired(underscore, a)
%   companyalsoknownas(a, underscore)
%   companyalsoknownas(a, uniqueVar15)
%   companyalsoknownas(uniqueVar15, a)

%%%%%  WILL-Produced Tree #5 @ 11:15:33 6/14/21.  [Using 8.344.128 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( companyeconomicsector(C, B), acquired(C, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( bankboughtbank(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( companyalsoknownas(A, F), companyalsoknownas(F, G) )
%   | | then if ( companyalsoknownas(A, G), companyalsoknownas(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.08990239710237306;  // std dev = 3,319, 75,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
%   | | else if ( companyalsoknownas(I, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.08696307369754609;  // std dev = 10,038, 699,000 (wgt'ed) examples reached here.  /* #neg=465 #pos=234 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     acquired(C, D), 
     !. // Clause #1.

companyeconomicsector(A, B, 0) :- 
     bankboughtbank(A, C), 
     !. // Clause #2.

companyeconomicsector(A, B, 0) :- 
     companyalsoknownas(A, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(A, D), 
     companyalsoknownas(D, E), 
     !. // Clause #3.

companyeconomicsector(A, B, 0.08990239710237306) :- 
     companyalsoknownas(A, C), 
     companyalsoknownas(C, D), 
     !. // Clause #4.

companyeconomicsector(A, B, 0) :- 
     companyalsoknownas(C, A), 
     !. // Clause #5.

companyeconomicsector(A, B, 0.08696307369754609) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(uniqueVar17, a),
   acquired(uniqueVar17, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, underscore, 0) :- 
   bankboughtbank(a, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, underscore, 0) :- 
   companyalsoknownas(a, uniqueVar18),
   companyalsoknownas(uniqueVar18, uniqueVar19),
   companyalsoknownas(a, uniqueVar19),
   companyalsoknownas(uniqueVar19, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(a, underscore, 0.08990239710237306) :-  /* #neg=51 #pos=24 */ 
   companyalsoknownas(a, uniqueVar20),
   companyalsoknownas(uniqueVar20, underscore),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(a, underscore, 0) :- 
   companyalsoknownas(underscore, a),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(underscore, underscore, 0.08696307369754609) :-  /* #neg=465 #pos=234 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   companyalsoknownas(a, uniqueVar20)
%   companyeconomicsector(uniqueVar17, a)
%   companyalsoknownas(uniqueVar18, uniqueVar19)
%   companyalsoknownas(uniqueVar20, underscore)
%   companyalsoknownas(a, uniqueVar18)
%   companyalsoknownas(underscore, a)
%   companyalsoknownas(a, uniqueVar19)
%   companyalsoknownas(uniqueVar19, underscore)
%   acquired(uniqueVar17, underscore)
%   bankboughtbank(a, underscore)

%%%%%  WILL-Produced Tree #6 @ 11:15:34 6/14/21.  [Using 8.549.696 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( companyeconomicsector(C, B), acquired(C, D) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( acquired(E, A), bankboughtbank(F, E) )
%   | then if ( bankboughtbank(A, F), bankboughtbank(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.060099531566126664;  // std dev = 0,897, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.07374606714998858;  // std dev = 10,446, 764,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=256 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     acquired(C, D), 
     !. // Clause #1.

companyeconomicsector(A, B, 0) :- 
     acquired(C, A), 
     bankboughtbank(D, C), 
     bankboughtbank(A, D), 
     bankboughtbank(D, A), 
     !. // Clause #2.

companyeconomicsector(A, B, -0.060099531566126664) :- 
     acquired(C, A), 
     bankboughtbank(D, C), 
     !. // Clause #3.

companyeconomicsector(A, B, 0.07374606714998858) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(uniqueVar21, a),
   acquired(uniqueVar21, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, underscore, 0) :- 
   acquired(uniqueVar22, a),
   bankboughtbank(uniqueVar23, uniqueVar22),
   bankboughtbank(a, uniqueVar23),
   bankboughtbank(uniqueVar23, a),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, underscore, -0.060099531566126664) :-  /* #neg=8 #pos=2 */ 
   acquired(uniqueVar24, a),
   bankboughtbank(underscore, uniqueVar24),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(underscore, underscore, 0.07374606714998858) :-  /* #neg=508 #pos=256 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   acquired(uniqueVar21, underscore)
%   bankboughtbank(uniqueVar23, a)
%   acquired(uniqueVar22, a)
%   companyeconomicsector(uniqueVar21, a)
%   bankboughtbank(a, uniqueVar23)
%   acquired(uniqueVar24, a)
%   bankboughtbank(uniqueVar23, uniqueVar22)
%   bankboughtbank(underscore, uniqueVar24)

%%%%%  WILL-Produced Tree #7 @ 11:15:34 6/14/21.  [Using 8.732.488 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( companyeconomicsector(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( companyalsoknownas(A, D) )
%   | then return 0.06138999675767501;  // std dev = 3,268, 75,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
%   | else return 0.05874789511069434;  // std dev = 9,903, 699,000 (wgt'ed) examples reached here.  /* #neg=465 #pos=234 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     companyeconomicsector(C, B), 
     !. // Clause #1.

companyeconomicsector(A, B, 0.06138999675767501) :- 
     companyalsoknownas(A, C), 
     !. // Clause #2.

companyeconomicsector(A, B, 0.05874789511069434) :- !. // Clause #3.


% The flattened versions of these clauses:

flattened_companyeconomicsector(underscore, a, 0) :- 
   companyeconomicsector(underscore, a),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, underscore, 0.06138999675767501) :-  /* #neg=51 #pos=24 */ 
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(underscore, underscore, 0.05874789511069434) :-  /* #neg=465 #pos=234 */ 
   !. // Flattened version of clause #3.


% The unique flattened literals:
%   companyalsoknownas(a, underscore)
%   companyeconomicsector(underscore, a)

%%%%%  WILL-Produced Tree #8 @ 11:15:34 6/14/21.  [Using 8.962.592 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( economicsectorcompany(B, C), bankboughtbank(C, D) )
%   then if ( bankboughtbank(E, A), bankboughtbank(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( bankboughtbank(C, G), companyalsoknownas(A, H) )
%   | | then if ( companyalsoknownas(I, A), companyalsoknownas(A, I) )
%   | | | then return 0.46840932792227635;  // std dev = 0,023, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( companyalsoknownas(J, A), bankboughtbank(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.45786242812948674;  // std dev = 1,452, 133,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=131 */
%   else if ( bankboughtbank(A, L) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.04173104975887575;  // std dev = 8,783, 635,000 (wgt'ed) examples reached here.  /* #neg=514 #pos=121 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(E, A), 
     bankboughtbank(E, F), 
     !. // Clause #1.

companyeconomicsector(A, B, 0.46840932792227635) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(C, E), 
     companyalsoknownas(A, F), 
     companyalsoknownas(G, A), 
     companyalsoknownas(A, G), 
     !. // Clause #2.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     bankboughtbank(C, E), 
     companyalsoknownas(A, F), 
     !. // Clause #3.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     companyalsoknownas(E, A), 
     bankboughtbank(F, E), 
     !. // Clause #4.

companyeconomicsector(A, B, 0.45786242812948674) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     !. // Clause #5.

companyeconomicsector(A, B, 0) :- 
     bankboughtbank(A, C), 
     !. // Clause #6.

companyeconomicsector(A, B, -0.04173104975887575) :- !. // Clause #7.


% The flattened versions of these clauses:

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar25),
   bankboughtbank(uniqueVar25, underscore),
   bankboughtbank(uniqueVar26, a),
   bankboughtbank(uniqueVar26, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, b, 0.46840932792227635) :-  /* #pos=6 */ 
   economicsectorcompany(b, uniqueVar27),
   bankboughtbank(uniqueVar27, underscore),
   bankboughtbank(uniqueVar27, underscore),
   companyalsoknownas(a, underscore),
   companyalsoknownas(uniqueVar28, a),
   companyalsoknownas(a, uniqueVar28),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar29),
   bankboughtbank(uniqueVar29, underscore),
   bankboughtbank(uniqueVar29, underscore),
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar30),
   bankboughtbank(uniqueVar30, underscore),
   companyalsoknownas(uniqueVar31, a),
   bankboughtbank(underscore, uniqueVar31),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(underscore, a, 0.45786242812948674) :-  /* #neg=2 #pos=131 */ 
   economicsectorcompany(a, uniqueVar32),
   bankboughtbank(uniqueVar32, underscore),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(a, underscore, 0) :- 
   bankboughtbank(a, underscore),
   !. // Flattened version of clause #6.

flattened_companyeconomicsector(underscore, underscore, -0.04173104975887575) :-  /* #neg=514 #pos=121 */ 
   !. // Flattened version of clause #7.


% The unique flattened literals:
%   companyalsoknownas(uniqueVar28, a)
%   economicsectorcompany(b, uniqueVar30)
%   bankboughtbank(uniqueVar32, underscore)
%   economicsectorcompany(a, uniqueVar32)
%   bankboughtbank(uniqueVar25, underscore)
%   bankboughtbank(a, underscore)
%   bankboughtbank(uniqueVar29, underscore)
%   economicsectorcompany(b, uniqueVar27)
%   bankboughtbank(uniqueVar26, underscore)
%   bankboughtbank(uniqueVar27, underscore)
%   economicsectorcompany(b, uniqueVar29)
%   companyalsoknownas(a, uniqueVar28)
%   economicsectorcompany(b, uniqueVar25)
%   companyalsoknownas(uniqueVar31, a)
%   bankboughtbank(uniqueVar26, a)
%   companyalsoknownas(a, underscore)
%   bankboughtbank(uniqueVar30, underscore)
%   bankboughtbank(underscore, uniqueVar31)

%%%%%  WILL-Produced Tree #9 @ 11:15:35 6/14/21.  [Using 9.169.120 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( economicsectorcompany(B, C) )
%   then if ( acquired(D, A), companyalsoknownas(D, E) )
%   | then if ( companyalsoknownas(C, D) )
%   | | then if ( companyalsoknownas(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3564686918817921;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( acquired(A, E), companyalsoknownas(C, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.332133899234556;  // std dev = 1,513, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( companyalsoknownas(C, H) )
%   | | then return 0.3744916021353434;  // std dev = 4,707, 246,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=218 */
%   | | else if ( bankboughtbank(C, I) )
%   | | | then return 0.5599027109206542;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22192050998151783;  // std dev = 3,966, 65,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=27 */
%   else if ( bankboughtbank(J, A), companyalsoknownas(K, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.19393942090455643;  // std dev = 0,081, 446,000 (wgt'ed) examples reached here.  /* #neg=446 */


% Clauses:

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     acquired(D, A), 
     companyalsoknownas(D, E), 
     companyalsoknownas(C, D), 
     companyalsoknownas(A, F), 
     !. // Clause #1.

companyeconomicsector(A, B, 0.3564686918817921) :- 
     economicsectorcompany(B, C), 
     acquired(D, A), 
     companyalsoknownas(D, E), 
     companyalsoknownas(C, D), 
     !. // Clause #2.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     acquired(D, A), 
     companyalsoknownas(D, E), 
     acquired(A, E), 
     companyalsoknownas(C, F), 
     !. // Clause #3.

companyeconomicsector(A, B, 0.332133899234556) :- 
     economicsectorcompany(B, C), 
     acquired(D, A), 
     companyalsoknownas(D, E), 
     !. // Clause #4.

companyeconomicsector(A, B, 0.3744916021353434) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     !. // Clause #5.

companyeconomicsector(A, B, 0.5599027109206542) :- 
     economicsectorcompany(B, C), 
     bankboughtbank(C, D), 
     !. // Clause #6.

companyeconomicsector(A, B, 0.22192050998151783) :- 
     economicsectorcompany(B, C), 
     !. // Clause #7.

companyeconomicsector(A, B, 0) :- 
     bankboughtbank(C, A), 
     companyalsoknownas(D, A), 
     !. // Clause #8.

companyeconomicsector(A, B, -0.19393942090455643) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar33),
   acquired(uniqueVar34, a),
   companyalsoknownas(uniqueVar34, underscore),
   companyalsoknownas(uniqueVar33, uniqueVar34),
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, b, 0.3564686918817921) :-  /* #pos=1 */ 
   economicsectorcompany(b, uniqueVar35),
   acquired(uniqueVar36, a),
   companyalsoknownas(uniqueVar36, underscore),
   companyalsoknownas(uniqueVar35, uniqueVar36),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar37),
   acquired(uniqueVar38, a),
   companyalsoknownas(uniqueVar38, uniqueVar39),
   acquired(a, uniqueVar39),
   companyalsoknownas(uniqueVar37, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(a, b, 0.332133899234556) :-  /* #neg=4 #pos=9 */ 
   economicsectorcompany(b, underscore),
   acquired(uniqueVar40, a),
   companyalsoknownas(uniqueVar40, underscore),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(underscore, a, 0.3744916021353434) :-  /* #neg=28 #pos=218 */ 
   economicsectorcompany(a, uniqueVar41),
   companyalsoknownas(uniqueVar41, underscore),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(underscore, a, 0.5599027109206542) :-  /* #pos=3 */ 
   economicsectorcompany(a, uniqueVar42),
   bankboughtbank(uniqueVar42, underscore),
   !. // Flattened version of clause #6.

flattened_companyeconomicsector(underscore, a, 0.22192050998151783) :-  /* #neg=38 #pos=27 */ 
   economicsectorcompany(a, underscore),
   !. // Flattened version of clause #7.

flattened_companyeconomicsector(a, underscore, 0) :- 
   bankboughtbank(underscore, a),
   companyalsoknownas(underscore, a),
   !. // Flattened version of clause #8.

flattened_companyeconomicsector(underscore, underscore, -0.19393942090455643) :-  /* #neg=446 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   companyalsoknownas(uniqueVar40, underscore)
%   economicsectorcompany(a, underscore)
%   economicsectorcompany(b, uniqueVar35)
%   economicsectorcompany(b, uniqueVar33)
%   acquired(uniqueVar36, a)
%   acquired(uniqueVar38, a)
%   economicsectorcompany(b, uniqueVar37)
%   companyalsoknownas(uniqueVar37, underscore)
%   bankboughtbank(underscore, a)
%   acquired(a, uniqueVar39)
%   economicsectorcompany(b, underscore)
%   bankboughtbank(uniqueVar42, underscore)
%   companyalsoknownas(uniqueVar35, uniqueVar36)
%   companyalsoknownas(uniqueVar36, underscore)
%   economicsectorcompany(a, uniqueVar42)
%   acquired(uniqueVar40, a)
%   companyalsoknownas(underscore, a)
%   companyalsoknownas(uniqueVar38, uniqueVar39)
%   acquired(uniqueVar34, a)
%   companyalsoknownas(uniqueVar41, underscore)
%   companyalsoknownas(uniqueVar33, uniqueVar34)
%   economicsectorcompany(a, uniqueVar41)
%   companyalsoknownas(uniqueVar34, underscore)
%   companyalsoknownas(a, underscore)

%%%%%  WILL-Produced Tree #10 @ 11:15:36 6/14/21.  [Using 9.429.976 memory cells.]  %%%%%

% FOR companyeconomicsector(A, B):
%   if ( economicsectorcompany(B, C), companyalsoknownas(C, D) )
%   then if ( companyalsoknownas(E, A), companyalsoknownas(C, E) )
%   | then return 0.48540705742911355;  // std dev = 0,597, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( companyalsoknownas(F, A), bankboughtbank(F, D) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( companyalsoknownas(G, A), acquired(G, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.27243712437754697;  // std dev = 4,731, 234,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=204 */
%   else if ( economicsectorcompany(B, I), acquired(A, J) )
%   | then return 0.24681320832282627;  // std dev = 1,021, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( acquired(K, A), companyalsoknownas(A, L) )
%   | | then if ( acquired(A, M) )
%   | | | then return -0.17519359485270822;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( acquired(A, N), companyalsoknownas(P, N) )
%   | | | then return -0.17519359485270822;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.12067431009144161;  // std dev = 4,692, 508,000 (wgt'ed) examples reached here.  /* #neg=480 #pos=28 */


% Clauses:

companyeconomicsector(A, B, 0.48540705742911355) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(E, A), 
     companyalsoknownas(C, E), 
     !. // Clause #1.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(E, A), 
     bankboughtbank(E, D), 
     !. // Clause #2.

companyeconomicsector(A, B, 0) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     companyalsoknownas(E, A), 
     acquired(E, F), 
     !. // Clause #3.

companyeconomicsector(A, B, 0.27243712437754697) :- 
     economicsectorcompany(B, C), 
     companyalsoknownas(C, D), 
     !. // Clause #4.

companyeconomicsector(A, B, 0.24681320832282627) :- 
     economicsectorcompany(B, C), 
     acquired(A, D), 
     !. // Clause #5.

companyeconomicsector(A, B, -0.17519359485270822) :- 
     acquired(C, A), 
     companyalsoknownas(A, D), 
     acquired(A, E), 
     !. // Clause #6.

companyeconomicsector(A, B, 0) :- 
     acquired(C, A), 
     companyalsoknownas(A, D), 
     !. // Clause #7.

companyeconomicsector(A, B, -0.17519359485270822) :- 
     acquired(A, C), 
     companyalsoknownas(D, C), 
     !. // Clause #8.

companyeconomicsector(A, B, -0.12067431009144161) :- !. // Clause #9.


% The flattened versions of these clauses:

flattened_companyeconomicsector(a, b, 0.48540705742911355) :-  /* #pos=24 */ 
   economicsectorcompany(b, uniqueVar43),
   companyalsoknownas(uniqueVar43, underscore),
   companyalsoknownas(uniqueVar44, a),
   companyalsoknownas(uniqueVar43, uniqueVar44),
   !. // Flattened version of clause #1.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar45),
   companyalsoknownas(uniqueVar45, uniqueVar46),
   companyalsoknownas(uniqueVar47, a),
   bankboughtbank(uniqueVar47, uniqueVar46),
   !. // Flattened version of clause #2.

flattened_companyeconomicsector(a, b, 0) :- 
   economicsectorcompany(b, uniqueVar48),
   companyalsoknownas(uniqueVar48, underscore),
   companyalsoknownas(uniqueVar49, a),
   acquired(uniqueVar49, underscore),
   !. // Flattened version of clause #3.

flattened_companyeconomicsector(underscore, a, 0.27243712437754697) :-  /* #neg=30 #pos=204 */ 
   economicsectorcompany(a, uniqueVar50),
   companyalsoknownas(uniqueVar50, underscore),
   !. // Flattened version of clause #4.

flattened_companyeconomicsector(a, b, 0.24681320832282627) :-  /* #neg=2 #pos=2 */ 
   economicsectorcompany(b, underscore),
   acquired(a, underscore),
   !. // Flattened version of clause #5.

flattened_companyeconomicsector(a, underscore, -0.17519359485270822) :-  /* #neg=3 */ 
   acquired(underscore, a),
   companyalsoknownas(a, underscore),
   acquired(a, underscore),
   !. // Flattened version of clause #6.

flattened_companyeconomicsector(a, underscore, 0) :- 
   acquired(underscore, a),
   companyalsoknownas(a, underscore),
   !. // Flattened version of clause #7.

flattened_companyeconomicsector(a, underscore, -0.17519359485270822) :-  /* #neg=1 */ 
   acquired(a, uniqueVar51),
   companyalsoknownas(underscore, uniqueVar51),
   !. // Flattened version of clause #8.

flattened_companyeconomicsector(underscore, underscore, -0.12067431009144161) :-  /* #neg=480 #pos=28 */ 
   !. // Flattened version of clause #9.


% The unique flattened literals:
%   acquired(a, underscore)
%   acquired(a, uniqueVar51)
%   acquired(uniqueVar49, underscore)
%   companyalsoknownas(uniqueVar43, uniqueVar44)
%   companyalsoknownas(uniqueVar49, a)
%   companyalsoknownas(uniqueVar44, a)
%   economicsectorcompany(b, uniqueVar45)
%   economicsectorcompany(b, uniqueVar48)
%   bankboughtbank(uniqueVar47, uniqueVar46)
%   companyalsoknownas(uniqueVar48, underscore)
%   economicsectorcompany(b, underscore)
%   companyalsoknownas(uniqueVar47, a)
%   companyalsoknownas(uniqueVar43, underscore)
%   companyalsoknownas(uniqueVar50, underscore)
%   companyalsoknownas(uniqueVar45, uniqueVar46)
%   companyalsoknownas(underscore, uniqueVar51)
%   economicsectorcompany(a, uniqueVar50)
%   acquired(underscore, a)
%   economicsectorcompany(b, uniqueVar43)
%   companyalsoknownas(a, underscore)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for companyeconomicsector.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
companyeconomicsector(D, E, Total) :- // A general accessor. 
   companyeconomicsector(D, E, 1000000, Total), !.
companyeconomicsector(D, E, Total) :- waitHere("This should not fail", companyeconomicsector(D, E, Total)).

companyeconomicsector(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_companyeconomicsector_tree1(D, E, TreesToUse, Total1),
   getScore_companyeconomicsector_tree2(D, E, TreesToUse, Total2),
   getScore_companyeconomicsector_tree3(D, E, TreesToUse, Total3),
   getScore_companyeconomicsector_tree4(D, E, TreesToUse, Total4),
   getScore_companyeconomicsector_tree5(D, E, TreesToUse, Total5),
   getScore_companyeconomicsector_tree6(D, E, TreesToUse, Total6),
   getScore_companyeconomicsector_tree7(D, E, TreesToUse, Total7),
   getScore_companyeconomicsector_tree8(D, E, TreesToUse, Total8),
   getScore_companyeconomicsector_tree9(D, E, TreesToUse, Total9),
   getScore_companyeconomicsector_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
companyeconomicsector(D, E, TreesToUse, Total) :- waitHere("This should not fail", companyeconomicsector(D, E, TreesToUse, Total)).

getScore_companyeconomicsector_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_companyeconomicsector_tree1(D, E, TreesToUse, Total1) :- companyeconomicsector_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_companyeconomicsector_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_companyeconomicsector_tree2(D, E, TreesToUse, Total2) :- companyeconomicsector_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_companyeconomicsector_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_companyeconomicsector_tree3(D, E, TreesToUse, Total3) :- companyeconomicsector_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_companyeconomicsector_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_companyeconomicsector_tree4(D, E, TreesToUse, Total4) :- companyeconomicsector_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_companyeconomicsector_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_companyeconomicsector_tree5(D, E, TreesToUse, Total5) :- companyeconomicsector_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_companyeconomicsector_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_companyeconomicsector_tree6(D, E, TreesToUse, Total6) :- companyeconomicsector_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_companyeconomicsector_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_companyeconomicsector_tree7(D, E, TreesToUse, Total7) :- companyeconomicsector_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_companyeconomicsector_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_companyeconomicsector_tree8(D, E, TreesToUse, Total8) :- companyeconomicsector_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_companyeconomicsector_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_companyeconomicsector_tree9(D, E, TreesToUse, Total9) :- companyeconomicsector_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_companyeconomicsector_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_companyeconomicsector_tree10(D, E, TreesToUse, Total10) :- companyeconomicsector_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(companyeconomicsector, 109, [
   companyalsoknownas(uniqueVar40, underscore),
   economicsectorcompany(b, uniqueVar30),
   acquired(uniqueVar49, underscore),
   economicsectorcompany(b, uniqueVar11),
   bankboughtbank(uniqueVar25, underscore),
   companyalsoknownas(uniqueVar43, uniqueVar44),
   economicsectorcompany(b, uniqueVar45),
   bankboughtbank(uniqueVar6, uniqueVar7),
   economicsectorcompany(b, uniqueVar6),
   companyeconomicsector(uniqueVar14, a),
   companyalsoknownas(uniqueVar14, underscore),
   bankboughtbank(uniqueVar23, a),
   acquired(uniqueVar22, a),
   companyalsoknownas(uniqueVar33, uniqueVar34),
   economicsectorcompany(b, uniqueVar43),
   companyalsoknownas(uniqueVar19, underscore),
   acquired(uniqueVar36, a),
   acquired(uniqueVar38, a),
   companyalsoknownas(uniqueVar37, underscore),
   companyalsoknownas(uniqueVar44, a),
   bankboughtbank(uniqueVar47, uniqueVar46),
   companyalsoknownas(uniqueVar48, underscore),
   bankboughtbank(uniqueVar27, underscore),
   economicsectorcompany(b, uniqueVar29),
   companyalsoknownas(uniqueVar16, a),
   companyeconomicsector(uniqueVar21, a),
   companyalsoknownas(underscore, uniqueVar51),
   companyalsoknownas(uniqueVar1, underscore),
   companyalsoknownas(uniqueVar4, underscore),
   bankboughtbank(uniqueVar30, underscore),
   economicsectorcompany(a, underscore),
   acquired(a, underscore),
   economicsectorcompany(a, uniqueVar32),
   acquired(underscore, uniqueVar5),
   companyalsoknownas(uniqueVar13, a),
   acquired(a, uniqueVar39),
   companyalsoknownas(uniqueVar20, underscore),
   companyalsoknownas(uniqueVar36, underscore),
   companyalsoknownas(underscore, a),
   companyalsoknownas(uniqueVar7, underscore),
   bankboughtbank(underscore, uniqueVar31),
   bankboughtbank(uniqueVar2, underscore),
   companyalsoknownas(a, uniqueVar18),
   bankboughtbank(uniqueVar32, underscore),
   acquired(uniqueVar17, underscore),
   companyalsoknownas(uniqueVar3, underscore),
   bankboughtbank(a, uniqueVar23),
   bankboughtbank(uniqueVar12, underscore),
   companyalsoknownas(a, uniqueVar20),
   companyalsoknownas(a, uniqueVar16),
   companyeconomicsector(underscore, a),
   bankboughtbank(underscore, uniqueVar13),
   economicsectorcompany(a, uniqueVar42),
   economicsectorcompany(b, uniqueVar25),
   acquired(uniqueVar34, a),
   acquired(uniqueVar24, a),
   acquired(uniqueVar10, underscore),
   companyalsoknownas(a, underscore),
   bankboughtbank(uniqueVar6, underscore),
   economicsectorcompany(b, uniqueVar33),
   bankboughtbank(a, underscore),
   economicsectorcompany(b, uniqueVar37),
   bankboughtbank(uniqueVar29, underscore),
   economicsectorcompany(b, underscore),
   companyalsoknownas(uniqueVar43, underscore),
   companyalsoknownas(uniqueVar31, a),
   acquired(underscore, a),
   companyalsoknownas(uniqueVar34, underscore),
   acquired(uniqueVar9, uniqueVar10),
   acquired(uniqueVar21, underscore),
   acquired(a, uniqueVar51),
   companyalsoknownas(a, uniqueVar19),
   economicsectorcompany(b, uniqueVar35),
   bankboughtbank(uniqueVar9, underscore),
   bankboughtbank(a, uniqueVar2),
   companyalsoknownas(uniqueVar47, a),
   bankboughtbank(uniqueVar26, a),
   economicsectorcompany(a, uniqueVar3),
   bankboughtbank(uniqueVar9, uniqueVar10),
   bankboughtbank(underscore, a),
   companyalsoknownas(a, uniqueVar8),
   economicsectorcompany(b, uniqueVar1),
   companyalsoknownas(a, uniqueVar28),
   bankboughtbank(uniqueVar11, underscore),
   companyalsoknownas(uniqueVar50, underscore),
   companyalsoknownas(uniqueVar45, uniqueVar46),
   economicsectorcompany(b, uniqueVar9),
   economicsectorcompany(a, uniqueVar50),
   economicsectorcompany(a, uniqueVar41),
   companyalsoknownas(uniqueVar28, a),
   economicsectorcompany(a, uniqueVar4),
   companyalsoknownas(uniqueVar49, a),
   economicsectorcompany(b, uniqueVar48),
   economicsectorcompany(a, uniqueVar12),
   bankboughtbank(underscore, uniqueVar24),
   companyalsoknownas(a, uniqueVar15),
   companyalsoknownas(uniqueVar15, a),
   companyalsoknownas(uniqueVar7, uniqueVar8),
   economicsectorcompany(b, uniqueVar27),
   bankboughtbank(uniqueVar42, underscore),
   companyeconomicsector(uniqueVar17, a),
   companyalsoknownas(uniqueVar35, uniqueVar36),
   companyalsoknownas(uniqueVar18, uniqueVar19),
   bankboughtbank(uniqueVar26, underscore),
   acquired(uniqueVar40, a),
   companyalsoknownas(uniqueVar38, uniqueVar39),
   bankboughtbank(uniqueVar5, a),
   companyalsoknownas(uniqueVar41, underscore),
   bankboughtbank(uniqueVar23, uniqueVar22)]).
