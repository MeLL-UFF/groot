usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 1.104
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 23:42:32 6/16/21.  [Using 5.700.248 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3,37e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12799020494077734;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.8581489350995115) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.12799020494077734) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.8581489350995115) :-  /* #pos=96 */ 
   venue(uniqueVar1, a),
   venue(uniqueVar1, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.12799020494077734) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar1, a)
%   venue(uniqueVar1, b)

%%%%%  WILL-Produced Tree #2 @ 23:42:33 6/16/21.  [Using 5.935.576 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1,88e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.11168486493253223;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.7194734122109541) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.11168486493253223) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.7194734122109541) :-  /* #pos=96 */ 
   venue(uniqueVar2, a),
   venue(uniqueVar2, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.11168486493253223) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar2, b)
%   venue(uniqueVar2, a)

%%%%%  WILL-Produced Tree #3 @ 23:42:33 6/16/21.  [Using 6.172.992 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4,09e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09624124323568636;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.5553664367462835) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.09624124323568636) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.5553664367462835) :-  /* #pos=96 */ 
   venue(uniqueVar3, a),
   venue(uniqueVar3, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.09624124323568636) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar3, a)
%   venue(uniqueVar3, b)

%%%%%  WILL-Produced Tree #4 @ 23:42:33 6/16/21.  [Using 6.370.432 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,23e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.08199773942954934;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.4175135841583099) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.08199773942954934) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.4175135841583099) :-  /* #pos=96 */ 
   venue(uniqueVar4, a),
   venue(uniqueVar4, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.08199773942954934) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar4, a)
%   venue(uniqueVar4, b)

%%%%%  WILL-Produced Tree #5 @ 23:42:33 6/16/21.  [Using 6.561.520 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06916707346178887;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.3207118471601504) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.06916707346178887) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.3207118471601504) :-  /* #pos=96 */ 
   venue(uniqueVar5, a),
   venue(uniqueVar5, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.06916707346178887) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar5, b)
%   venue(uniqueVar5, a)

%%%%%  WILL-Produced Tree #6 @ 23:42:34 6/16/21.  [Using 6.763.264 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.05784244905607229;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.2551722425694897) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.05784244905607229) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.2551722425694897) :-  /* #pos=96 */ 
   venue(uniqueVar6, a),
   venue(uniqueVar6, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.05784244905607229) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar6, b)
%   venue(uniqueVar6, a)

%%%%%  WILL-Produced Tree #7 @ 23:42:34 6/16/21.  [Using 6.953.752 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1,26e-07, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.04801864731741128;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.20975771563253567) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.04801864731741128) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.20975771563253567) :-  /* #pos=96 */ 
   venue(uniqueVar7, a),
   venue(uniqueVar7, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.04801864731741128) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar7, b)
%   venue(uniqueVar7, a)

%%%%%  WILL-Produced Tree #8 @ 23:42:34 6/16/21.  [Using 7.160.008 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7,60e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03961921256882768;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.17709649774527722) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.03961921256882768) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.17709649774527722) :-  /* #pos=96 */ 
   venue(uniqueVar8, a),
   venue(uniqueVar8, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.03961921256882768) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar8, a)
%   venue(uniqueVar8, b)

%%%%%  WILL-Produced Tree #9 @ 23:42:35 6/16/21.  [Using 7.349.304 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03252298213514028;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.1527438580936713) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.03252298213514028) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.1527438580936713) :-  /* #pos=96 */ 
   venue(uniqueVar9, a),
   venue(uniqueVar9, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.03252298213514028) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar9, a)
%   venue(uniqueVar9, b)

%%%%%  WILL-Produced Tree #10 @ 23:42:35 6/16/21.  [Using 7.539.128 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3,65e-08, 96,000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.026586181129101726;  // std dev = 14,093, 1.008,000 (wgt'ed) examples reached here.  /* #neg=736 #pos=272 */


% Clauses:

samevenue(A, B, 0.13400703000801115) :- 
     venue(C, A), 
     venue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.026586181129101726) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0.13400703000801115) :-  /* #pos=96 */ 
   venue(uniqueVar10, a),
   venue(uniqueVar10, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.026586181129101726) :-  /* #neg=736 #pos=272 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   venue(uniqueVar10, a)
%   venue(uniqueVar10, b)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for samevenue.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
samevenue(D, E, Total) :- // A general accessor. 
   samevenue(D, E, 1000000, Total), !.
samevenue(D, E, Total) :- waitHere("This should not fail", samevenue(D, E, Total)).

samevenue(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_samevenue_tree1(D, E, TreesToUse, Total1),
   getScore_samevenue_tree2(D, E, TreesToUse, Total2),
   getScore_samevenue_tree3(D, E, TreesToUse, Total3),
   getScore_samevenue_tree4(D, E, TreesToUse, Total4),
   getScore_samevenue_tree5(D, E, TreesToUse, Total5),
   getScore_samevenue_tree6(D, E, TreesToUse, Total6),
   getScore_samevenue_tree7(D, E, TreesToUse, Total7),
   getScore_samevenue_tree8(D, E, TreesToUse, Total8),
   getScore_samevenue_tree9(D, E, TreesToUse, Total9),
   getScore_samevenue_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
samevenue(D, E, TreesToUse, Total) :- waitHere("This should not fail", samevenue(D, E, TreesToUse, Total)).

getScore_samevenue_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_samevenue_tree1(D, E, TreesToUse, Total1) :- samevenue_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_samevenue_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_samevenue_tree2(D, E, TreesToUse, Total2) :- samevenue_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_samevenue_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_samevenue_tree3(D, E, TreesToUse, Total3) :- samevenue_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_samevenue_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_samevenue_tree4(D, E, TreesToUse, Total4) :- samevenue_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_samevenue_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_samevenue_tree5(D, E, TreesToUse, Total5) :- samevenue_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_samevenue_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_samevenue_tree6(D, E, TreesToUse, Total6) :- samevenue_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_samevenue_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_samevenue_tree7(D, E, TreesToUse, Total7) :- samevenue_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_samevenue_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_samevenue_tree8(D, E, TreesToUse, Total8) :- samevenue_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_samevenue_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_samevenue_tree9(D, E, TreesToUse, Total9) :- samevenue_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_samevenue_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_samevenue_tree10(D, E, TreesToUse, Total10) :- samevenue_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(samevenue, 20, [
   venue(uniqueVar7, b),
   venue(uniqueVar5, b),
   venue(uniqueVar6, a),
   venue(uniqueVar9, a),
   venue(uniqueVar3, b),
   venue(uniqueVar10, a),
   venue(uniqueVar5, a),
   venue(uniqueVar1, b),
   venue(uniqueVar7, a),
   venue(uniqueVar9, b),
   venue(uniqueVar4, b),
   venue(uniqueVar4, a),
   venue(uniqueVar3, a),
   venue(uniqueVar8, b),
   venue(uniqueVar2, a),
   venue(uniqueVar6, b),
   venue(uniqueVar10, b),
   venue(uniqueVar2, b),
   venue(uniqueVar8, a),
   venue(uniqueVar1, a)]).
