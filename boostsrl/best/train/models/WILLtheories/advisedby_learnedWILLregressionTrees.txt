usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 48
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 17:27:14 5/29/21.  [Using 4.167.552 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E), publication(F, B) )
%   | | then if ( ta(G, H, E), publication(I, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3581489350995123;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( projectmember(J, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.8581489350995122) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.8581489350995122) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     ta(F, G, D), 
     publication(H, G), 
     !. // Clause #2.

advisedby(A, B, 0.3581489350995123) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     !. // Clause #3.

advisedby(A, B, 0.6081489350995122) :- 
     professor(B), 
     student(A), 
     projectmember(C, B), 
     !. // Clause #4.

advisedby(A, B, 0.10814893509951219) :- 
     professor(B), 
     student(A), 
     !. // Clause #5.

advisedby(A, B, -0.14185106490048774) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.8581489350995122) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar1, a),
   publication(uniqueVar1, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.8581489350995122) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, uniqueVar2),
   publication(underscore, b),
   ta(underscore, uniqueVar3, uniqueVar2),
   publication(underscore, uniqueVar3),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.3581489350995123) :-  /* #neg=4 #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, underscore),
   publication(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.6081489350995122) :-  /* #neg=1 #pos=3 */ 
   professor(b),
   student(a),
   projectmember(underscore, b),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.10814893509951219) :-  /* #neg=3 #pos=1 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, underscore, -0.14185106490048774) :-  /* #neg=24 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   publication(underscore, b)
%   professor(b)
%   publication(uniqueVar1, a)
%   projectmember(underscore, b)
%   ta(underscore, uniqueVar3, uniqueVar2)
%   ta(underscore, a, uniqueVar2)
%   student(a)
%   publication(underscore, uniqueVar3)
%   publication(uniqueVar1, b)

%%%%%  WILL-Produced Tree #2 @ 17:27:14 5/29/21.  [Using 4.195.544 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(D, B), ta(E, A, F) )
%   | | then return 0.1281847446026639;  // std dev = 0,834, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( projectmember(G, B) )
%   | | | then return 0.7670719622367216;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3648721582071893;  // std dev = 1,751, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.7194734122109545) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.1281847446026639) :- 
     professor(B), 
     student(A), 
     projectmember(C, B), 
     ta(D, A, E), 
     !. // Clause #2.

advisedby(A, B, 0.7670719622367216) :- 
     professor(B), 
     student(A), 
     projectmember(C, B), 
     !. // Clause #3.

advisedby(A, B, 0.3648721582071893) :- 
     professor(B), 
     student(A), 
     !. // Clause #4.

advisedby(A, B, -0.12544463852839138) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.7194734122109545) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar4, a),
   publication(uniqueVar4, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.1281847446026639) :-  /* #neg=2 #pos=1 */ 
   professor(b),
   student(a),
   projectmember(underscore, b),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.7670719622367216) :-  /* #pos=3 */ 
   professor(b),
   student(a),
   projectmember(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.3648721582071893) :-  /* #neg=6 #pos=8 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.12544463852839138) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   professor(b)
%   student(a)
%   projectmember(underscore, b)
%   publication(uniqueVar4, a)
%   publication(uniqueVar4, b)

%%%%%  WILL-Produced Tree #3 @ 17:27:14 5/29/21.  [Using 4.222.688 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(D, B), ta(E, A, F) )
%   | | then return 0.10654753155474088;  // std dev = 0,835, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( projectmember(G, B) )
%   | | | then return 0.6046262796882593;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2998843411895928;  // std dev = 1,732, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   else return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.5553664367462845) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.10654753155474088) :- 
     professor(B), 
     student(A), 
     projectmember(C, B), 
     ta(D, A, E), 
     !. // Clause #2.

advisedby(A, B, 0.6046262796882593) :- 
     professor(B), 
     student(A), 
     projectmember(C, B), 
     !. // Clause #3.

advisedby(A, B, 0.2998843411895928) :- 
     professor(B), 
     student(A), 
     !. // Clause #4.

advisedby(A, B, -0.11231637819360639) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.5553664367462845) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar5, a),
   publication(uniqueVar5, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.10654753155474088) :-  /* #neg=2 #pos=1 */ 
   professor(b),
   student(a),
   projectmember(underscore, b),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.6046262796882593) :-  /* #pos=3 */ 
   professor(b),
   student(a),
   projectmember(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.2998843411895928) :-  /* #neg=6 #pos=8 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.11231637819360639) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   publication(uniqueVar5, a)
%   publication(uniqueVar5, b)
%   professor(b)
%   student(a)
%   projectmember(underscore, b)

%%%%%  WILL-Produced Tree #4 @ 17:27:15 5/29/21.  [Using 4.341.048 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( publication(D, B), ta(E, A, F) )
%   | | then if ( ta(E, G, H), publication(I, G) )
%   | | | then return 0.6463136506525012;  // std dev = 0,095, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22069924314265943;  // std dev = 1,395, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( projectmember(J, B) )
%   | | | then return 0.2720053963567208;  // std dev = 0,634, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.01364777084595721;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.41751358415830997) :- 
     student(A), 
     professor(B), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.6463136506525012) :- 
     student(A), 
     professor(B), 
     publication(C, B), 
     ta(D, A, E), 
     ta(D, F, G), 
     publication(H, F), 
     !. // Clause #2.

advisedby(A, B, 0.22069924314265943) :- 
     student(A), 
     professor(B), 
     publication(C, B), 
     ta(D, A, E), 
     !. // Clause #3.

advisedby(A, B, 0.2720053963567208) :- 
     student(A), 
     professor(B), 
     projectmember(C, B), 
     !. // Clause #4.

advisedby(A, B, -0.01364777084595721) :- 
     student(A), 
     professor(B), 
     !. // Clause #5.

advisedby(A, B, -0.10159632948783635) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.41751358415830997) :-  /* #pos=4 */ 
   student(a),
   professor(b),
   publication(uniqueVar6, a),
   publication(uniqueVar6, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.6463136506525012) :-  /* #pos=3 */ 
   student(a),
   professor(b),
   publication(underscore, b),
   ta(uniqueVar7, a, underscore),
   ta(uniqueVar7, uniqueVar8, underscore),
   publication(underscore, uniqueVar8),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.22069924314265943) :-  /* #neg=4 #pos=5 */ 
   student(a),
   professor(b),
   publication(underscore, b),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.2720053963567208) :-  /* #neg=1 #pos=3 */ 
   student(a),
   professor(b),
   projectmember(underscore, b),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, -0.01364777084595721) :-  /* #neg=3 #pos=1 */ 
   student(a),
   professor(b),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, underscore, -0.10159632948783635) :-  /* #neg=24 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   publication(underscore, b)
%   professor(b)
%   projectmember(underscore, b)
%   publication(uniqueVar6, b)
%   publication(underscore, uniqueVar8)
%   ta(uniqueVar7, uniqueVar8, underscore)
%   ta(uniqueVar7, a, underscore)
%   student(a)
%   publication(uniqueVar6, a)

%%%%%  WILL-Produced Tree #5 @ 17:27:15 5/29/21.  [Using 4.352.528 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E), publication(F, B) )
%   | | then if ( ta(G, H, E), publication(I, H) )
%   | | | then return 0.4877537542089029;  // std dev = 0,091, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13306624979663273;  // std dev = 1,354, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( publication(J, B) )
%   | | | then return -0.044364393170209605;  // std dev = 0,531, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.18414124148036587;  // std dev = 0,927, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.32071184716014967) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.4877537542089029) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     ta(F, G, D), 
     publication(H, G), 
     !. // Clause #2.

advisedby(A, B, 0.13306624979663273) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     !. // Clause #3.

advisedby(A, B, -0.044364393170209605) :- 
     professor(B), 
     student(A), 
     publication(C, B), 
     !. // Clause #4.

advisedby(A, B, 0.18414124148036587) :- 
     professor(B), 
     student(A), 
     !. // Clause #5.

advisedby(A, B, -0.09269127618926094) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.32071184716014967) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar9, a),
   publication(uniqueVar9, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.4877537542089029) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, uniqueVar10),
   publication(underscore, b),
   ta(underscore, uniqueVar11, uniqueVar10),
   publication(underscore, uniqueVar11),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.13306624979663273) :-  /* #neg=4 #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, underscore),
   publication(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, -0.044364393170209605) :-  /* #neg=2 #pos=1 */ 
   professor(b),
   student(a),
   publication(underscore, b),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.18414124148036587) :-  /* #neg=2 #pos=3 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, underscore, -0.09269127618926094) :-  /* #neg=24 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   publication(underscore, b)
%   publication(underscore, uniqueVar11)
%   professor(b)
%   publication(uniqueVar9, b)
%   ta(underscore, uniqueVar11, uniqueVar10)
%   ta(underscore, a, uniqueVar10)
%   student(a)
%   publication(uniqueVar9, a)

%%%%%  WILL-Produced Tree #6 @ 17:27:15 5/29/21.  [Using 4.363.696 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E), projectmember(F, B) )
%   | | then return 0.0084093205906934;  // std dev = 0,850, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( projectmember(G, B) )
%   | | | then return 0.3639399894242132;  // std dev = 0,044, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12815516413727995;  // std dev = 1,539, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   else return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.25517224256948945) :- 
     student(A), 
     professor(B), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.0084093205906934) :- 
     student(A), 
     professor(B), 
     ta(C, A, D), 
     projectmember(E, B), 
     !. // Clause #2.

advisedby(A, B, 0.3639399894242132) :- 
     student(A), 
     professor(B), 
     projectmember(C, B), 
     !. // Clause #3.

advisedby(A, B, 0.12815516413727995) :- 
     student(A), 
     professor(B), 
     !. // Clause #4.

advisedby(A, B, -0.08518475138839682) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.25517224256948945) :-  /* #pos=4 */ 
   student(a),
   professor(b),
   publication(uniqueVar12, a),
   publication(uniqueVar12, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.0084093205906934) :-  /* #neg=2 #pos=1 */ 
   student(a),
   professor(b),
   ta(underscore, a, underscore),
   projectmember(underscore, b),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.3639399894242132) :-  /* #pos=3 */ 
   student(a),
   professor(b),
   projectmember(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.12815516413727995) :-  /* #neg=6 #pos=8 */ 
   student(a),
   professor(b),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.08518475138839682) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   publication(uniqueVar12, a)
%   publication(uniqueVar12, b)
%   ta(underscore, a, underscore)
%   student(a)
%   professor(b)
%   projectmember(underscore, b)

%%%%%  WILL-Produced Tree #7 @ 17:27:16 5/29/21.  [Using 4.425.304 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E), publication(F, B) )
%   | | then if ( ta(D, G, H), publication(I, G) )
%   | | | then return 0.40224917676249355;  // std dev = 0,160, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08700446730022045;  // std dev = 1,335, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( publication(J, B) )
%   | | | then return -0.07960255631709001;  // std dev = 0,485, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1015094313580335;  // std dev = 0,893, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.20975771563253554) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.40224917676249355) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     ta(C, F, G), 
     publication(H, F), 
     !. // Clause #2.

advisedby(A, B, 0.08700446730022045) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     publication(E, B), 
     !. // Clause #3.

advisedby(A, B, -0.07960255631709001) :- 
     professor(B), 
     student(A), 
     publication(C, B), 
     !. // Clause #4.

advisedby(A, B, 0.1015094313580335) :- 
     professor(B), 
     student(A), 
     !. // Clause #5.

advisedby(A, B, -0.07877675473109176) :- !. // Clause #6.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.20975771563253554) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar13, a),
   publication(uniqueVar13, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.40224917676249355) :-  /* #pos=3 */ 
   professor(b),
   student(a),
   ta(uniqueVar14, a, underscore),
   publication(underscore, b),
   ta(uniqueVar14, uniqueVar15, underscore),
   publication(underscore, uniqueVar15),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.08700446730022045) :-  /* #neg=4 #pos=5 */ 
   professor(b),
   student(a),
   ta(underscore, a, underscore),
   publication(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, -0.07960255631709001) :-  /* #neg=2 #pos=1 */ 
   professor(b),
   student(a),
   publication(underscore, b),
   !. // Flattened version of clause #4.

flattened_advisedby(a, b, 0.1015094313580335) :-  /* #neg=2 #pos=3 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #5.

flattened_advisedby(underscore, underscore, -0.07877675473109176) :-  /* #neg=24 */ 
   !. // Flattened version of clause #6.


% The unique flattened literals:
%   publication(uniqueVar13, a)
%   ta(underscore, a, underscore)
%   publication(underscore, b)
%   professor(b)
%   publication(underscore, uniqueVar15)
%   ta(uniqueVar14, a, underscore)
%   ta(uniqueVar14, uniqueVar15, underscore)
%   publication(uniqueVar13, b)
%   student(a)

%%%%%  WILL-Produced Tree #8 @ 17:27:16 5/29/21.  [Using 4.443.672 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( projectmember(D, B), publication(E, B) )
%   | | then return 0.2318131675901743;  // std dev = 0,718, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( ta(F, A, G), publication(H, B) )
%   | | | then return 0.1178351148153443;  // std dev = 1,198, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.0177952070603352;  // std dev = 0,984, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.17709649774527736) :- 
     student(A), 
     professor(B), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.2318131675901743) :- 
     student(A), 
     professor(B), 
     projectmember(C, B), 
     publication(D, B), 
     !. // Clause #2.

advisedby(A, B, 0.1178351148153443) :- 
     student(A), 
     professor(B), 
     ta(C, A, D), 
     publication(E, B), 
     !. // Clause #3.

advisedby(A, B, -0.0177952070603352) :- 
     student(A), 
     professor(B), 
     !. // Clause #4.

advisedby(A, B, -0.07324622576333704) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.17709649774527736) :-  /* #pos=4 */ 
   student(a),
   professor(b),
   publication(uniqueVar16, a),
   publication(uniqueVar16, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.2318131675901743) :-  /* #neg=1 #pos=2 */ 
   student(a),
   professor(b),
   projectmember(underscore, b),
   publication(underscore, b),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, 0.1178351148153443) :-  /* #neg=3 #pos=7 */ 
   student(a),
   professor(b),
   ta(underscore, a, underscore),
   publication(underscore, b),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, -0.0177952070603352) :-  /* #neg=4 #pos=3 */ 
   student(a),
   professor(b),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.07324622576333704) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   publication(underscore, b)
%   professor(b)
%   publication(uniqueVar16, a)
%   projectmember(underscore, b)
%   student(a)
%   publication(uniqueVar16, b)

%%%%%  WILL-Produced Tree #9 @ 17:27:16 5/29/21.  [Using 4.497.496 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E) )
%   | | then if ( ta(F, G, E), publication(H, G) )
%   | | | then return 0.2836887721124507;  // std dev = 0,118, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07101920508121233;  // std dev = 1,397, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.15481505439148321;  // std dev = 0,793, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.15274385809367097) :- 
     professor(B), 
     student(A), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.2836887721124507) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     ta(E, F, D), 
     publication(G, F), 
     !. // Clause #2.

advisedby(A, B, -0.07101920508121233) :- 
     professor(B), 
     student(A), 
     ta(C, A, D), 
     !. // Clause #3.

advisedby(A, B, 0.15481505439148321) :- 
     professor(B), 
     student(A), 
     !. // Clause #4.

advisedby(A, B, -0.06842697784420275) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.15274385809367097) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   publication(uniqueVar17, a),
   publication(uniqueVar17, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.2836887721124507) :-  /* #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, uniqueVar18),
   ta(underscore, uniqueVar19, uniqueVar18),
   publication(underscore, uniqueVar19),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, -0.07101920508121233) :-  /* #neg=6 #pos=4 */ 
   professor(b),
   student(a),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.15481505439148321) :-  /* #neg=2 #pos=4 */ 
   professor(b),
   student(a),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.06842697784420275) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   ta(underscore, a, underscore)
%   professor(b)
%   publication(underscore, uniqueVar19)
%   publication(uniqueVar17, b)
%   student(a)
%   ta(underscore, a, uniqueVar18)
%   publication(uniqueVar17, a)
%   ta(underscore, uniqueVar19, uniqueVar18)

%%%%%  WILL-Produced Tree #10 @ 17:27:16 5/29/21.  [Using 4.522.136 memory cells.]  %%%%%

% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( ta(D, A, E) )
%   | | then if ( ta(D, F, G), publication(H, F) )
%   | | | then return 0.28710008046839625;  // std dev = 0,176, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.04370895655270145;  // std dev = 1,380, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return 0.12416672321021587;  // std dev = 0,790, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


% Clauses:

advisedby(A, B, 0.13400703000801117) :- 
     student(A), 
     professor(B), 
     publication(C, A), 
     publication(C, B), 
     !. // Clause #1.

advisedby(A, B, 0.28710008046839625) :- 
     student(A), 
     professor(B), 
     ta(C, A, D), 
     ta(C, E, F), 
     publication(G, E), 
     !. // Clause #2.

advisedby(A, B, -0.04370895655270145) :- 
     student(A), 
     professor(B), 
     ta(C, A, D), 
     !. // Clause #3.

advisedby(A, B, 0.12416672321021587) :- 
     student(A), 
     professor(B), 
     !. // Clause #4.

advisedby(A, B, -0.0641918400820262) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_advisedby(a, b, 0.13400703000801117) :-  /* #pos=4 */ 
   student(a),
   professor(b),
   publication(uniqueVar20, a),
   publication(uniqueVar20, b),
   !. // Flattened version of clause #1.

flattened_advisedby(a, b, 0.28710008046839625) :-  /* #pos=3 */ 
   student(a),
   professor(b),
   ta(uniqueVar21, a, underscore),
   ta(uniqueVar21, uniqueVar22, underscore),
   publication(underscore, uniqueVar22),
   !. // Flattened version of clause #2.

flattened_advisedby(a, b, -0.04370895655270145) :-  /* #neg=6 #pos=5 */ 
   student(a),
   professor(b),
   ta(underscore, a, underscore),
   !. // Flattened version of clause #3.

flattened_advisedby(a, b, 0.12416672321021587) :-  /* #neg=2 #pos=4 */ 
   student(a),
   professor(b),
   !. // Flattened version of clause #4.

flattened_advisedby(underscore, underscore, -0.0641918400820262) :-  /* #neg=24 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   publication(underscore, uniqueVar22)
%   ta(uniqueVar21, a, underscore)
%   ta(underscore, a, underscore)
%   professor(b)
%   ta(uniqueVar21, uniqueVar22, underscore)
%   publication(uniqueVar20, b)
%   student(a)
%   publication(uniqueVar20, a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for advisedby.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
advisedby(D, E, Total) :- // A general accessor. 
   advisedby(D, E, 1000000, Total), !.
advisedby(D, E, Total) :- waitHere("This should not fail", advisedby(D, E, Total)).

advisedby(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_advisedby_tree1(D, E, TreesToUse, Total1),
   getScore_advisedby_tree2(D, E, TreesToUse, Total2),
   getScore_advisedby_tree3(D, E, TreesToUse, Total3),
   getScore_advisedby_tree4(D, E, TreesToUse, Total4),
   getScore_advisedby_tree5(D, E, TreesToUse, Total5),
   getScore_advisedby_tree6(D, E, TreesToUse, Total6),
   getScore_advisedby_tree7(D, E, TreesToUse, Total7),
   getScore_advisedby_tree8(D, E, TreesToUse, Total8),
   getScore_advisedby_tree9(D, E, TreesToUse, Total9),
   getScore_advisedby_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
advisedby(D, E, TreesToUse, Total) :- waitHere("This should not fail", advisedby(D, E, TreesToUse, Total)).

getScore_advisedby_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_advisedby_tree1(D, E, TreesToUse, Total1) :- advisedby_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_advisedby_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_advisedby_tree2(D, E, TreesToUse, Total2) :- advisedby_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_advisedby_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_advisedby_tree3(D, E, TreesToUse, Total3) :- advisedby_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_advisedby_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_advisedby_tree4(D, E, TreesToUse, Total4) :- advisedby_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_advisedby_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_advisedby_tree5(D, E, TreesToUse, Total5) :- advisedby_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_advisedby_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_advisedby_tree6(D, E, TreesToUse, Total6) :- advisedby_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_advisedby_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_advisedby_tree7(D, E, TreesToUse, Total7) :- advisedby_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_advisedby_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_advisedby_tree8(D, E, TreesToUse, Total8) :- advisedby_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_advisedby_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_advisedby_tree9(D, E, TreesToUse, Total9) :- advisedby_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_advisedby_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_advisedby_tree10(D, E, TreesToUse, Total10) :- advisedby_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(advisedby, 43, [
   professor(b),
   projectmember(underscore, b),
   publication(uniqueVar6, b),
   publication(uniqueVar9, b),
   ta(uniqueVar14, a, underscore),
   publication(uniqueVar17, b),
   publication(uniqueVar16, b),
   publication(uniqueVar4, a),
   publication(uniqueVar20, a),
   publication(uniqueVar12, a),
   publication(uniqueVar5, b),
   publication(underscore, uniqueVar11),
   publication(underscore, uniqueVar19),
   publication(underscore, uniqueVar15),
   publication(underscore, uniqueVar8),
   ta(underscore, uniqueVar3, uniqueVar2),
   publication(uniqueVar12, b),
   publication(uniqueVar5, a),
   student(a),
   publication(underscore, uniqueVar3),
   ta(underscore, a, uniqueVar18),
   ta(uniqueVar21, a, underscore),
   publication(underscore, b),
   publication(uniqueVar16, a),
   publication(uniqueVar4, b),
   ta(uniqueVar14, uniqueVar15, underscore),
   publication(uniqueVar20, b),
   ta(underscore, a, uniqueVar2),
   ta(uniqueVar7, a, underscore),
   ta(underscore, uniqueVar11, uniqueVar10),
   publication(uniqueVar1, b),
   publication(uniqueVar9, a),
   publication(uniqueVar6, a),
   publication(uniqueVar17, a),
   publication(uniqueVar13, a),
   publication(underscore, uniqueVar22),
   ta(underscore, a, underscore),
   ta(uniqueVar21, uniqueVar22, underscore),
   publication(uniqueVar1, a),
   ta(uniqueVar7, uniqueVar8, underscore),
   publication(uniqueVar13, b),
   ta(underscore, a, uniqueVar10),
   ta(underscore, uniqueVar19, uniqueVar18)]).
