usePrologVariables: true.

% maxTreeDepthInNodes                 = 3
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10.000
% maxAcceptableNodeScoreToStop        = 0,003
% negPosRatio                         = 2,000
% testNegPosRatio                     = -1,000
% # of pos examples                   = 2.313
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 23:42:52 6/16/21.  [Using 6.234.760 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1914822684328406;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1914822684328406) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar1, a),
   samevenue(uniqueVar1, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1914822684328406) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar1, a)
%   samevenue(uniqueVar1, b)

%%%%%  WILL-Produced Tree #2 @ 23:42:53 6/16/21.  [Using 6.725.568 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), recursion_samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16653882456486124;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     recursion_samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.16653882456486124) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar2, a),
   recursion_samevenue(uniqueVar2, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.16653882456486124) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   recursion_samevenue(uniqueVar2, b)
%   samevenue(uniqueVar2, a)

%%%%%  WILL-Produced Tree #3 @ 23:42:53 6/16/21.  [Using 7.255.624 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), recursion_samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.14209424281557156;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     recursion_samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.14209424281557156) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar3, a),
   recursion_samevenue(uniqueVar3, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.14209424281557156) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar3, a)
%   recursion_samevenue(uniqueVar3, b)

%%%%%  WILL-Produced Tree #4 @ 23:42:53 6/16/21.  [Using 7.599.104 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1191489049074691;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.1191489049074691) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar4, a),
   samevenue(uniqueVar4, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.1191489049074691) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar4, b)
%   samevenue(uniqueVar4, a)

%%%%%  WILL-Produced Tree #5 @ 23:42:54 6/16/21.  [Using 8.008.352 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( recursion_samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09841340278402057;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     recursion_samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.09841340278402057) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   recursion_samevenue(uniqueVar5, a),
   samevenue(uniqueVar5, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.09841340278402057) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   recursion_samevenue(uniqueVar5, a)
%   samevenue(uniqueVar5, b)

%%%%%  WILL-Produced Tree #6 @ 23:42:54 6/16/21.  [Using 8.427.096 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( recursion_samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.08026654944252314;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     recursion_samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.08026654944252314) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   recursion_samevenue(uniqueVar6, a),
   samevenue(uniqueVar6, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.08026654944252314) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar6, b)
%   recursion_samevenue(uniqueVar6, a)

%%%%%  WILL-Produced Tree #7 @ 23:42:54 6/16/21.  [Using 8.822.184 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( recursion_samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.06479591611328821;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     recursion_samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.06479591611328821) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   recursion_samevenue(uniqueVar7, a),
   samevenue(uniqueVar7, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.06479591611328821) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar7, b)
%   recursion_samevenue(uniqueVar7, a)

%%%%%  WILL-Produced Tree #8 @ 23:42:55 6/16/21.  [Using 9.251.328 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.051879169344046294;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.051879169344046294) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar8, a),
   samevenue(uniqueVar8, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.051879169344046294) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   samevenue(uniqueVar8, a)
%   samevenue(uniqueVar8, b)

%%%%%  WILL-Produced Tree #9 @ 23:42:55 6/16/21.  [Using 9.647.024 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), recursion_samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04126932998425056;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     recursion_samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.04126932998425056) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar9, a),
   recursion_samevenue(uniqueVar9, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.04126932998425056) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   recursion_samevenue(uniqueVar9, b)
%   samevenue(uniqueVar9, a)

%%%%%  WILL-Produced Tree #10 @ 23:42:56 6/16/21.  [Using 10.042.264 memory cells.]  %%%%%

% FOR samevenue(A, B):
%   if ( samevenue(C, A), recursion_samevenue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.032663748734838016;  // std dev = 22,672, 2.313,000 (wgt'ed) examples reached here.  /* #neg=1.542 #pos=771 */


% Clauses:

samevenue(A, B, 0) :- 
     samevenue(C, A), 
     recursion_samevenue(C, B), 
     !. // Clause #1.

samevenue(A, B, 0.032663748734838016) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_samevenue(a, b, 0) :- 
   samevenue(uniqueVar10, a),
   recursion_samevenue(uniqueVar10, b),
   !. // Flattened version of clause #1.

flattened_samevenue(underscore, underscore, 0.032663748734838016) :-  /* #neg=1.542 #pos=771 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   recursion_samevenue(uniqueVar10, b)
%   samevenue(uniqueVar10, a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for samevenue.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).
stepLength_tree2(1.0).
stepLength_tree3(1.0).
stepLength_tree4(1.0).
stepLength_tree5(1.0).
stepLength_tree6(1.0).
stepLength_tree7(1.0).
stepLength_tree8(1.0).
stepLength_tree9(1.0).
stepLength_tree10(1.0).

logPrior(-1.8).
samevenue(D, E, Total) :- // A general accessor. 
   samevenue(D, E, 1000000, Total), !.
samevenue(D, E, Total) :- waitHere("This should not fail", samevenue(D, E, Total)).

samevenue(D, E, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_samevenue_tree1(D, E, TreesToUse, Total1),
   getScore_samevenue_tree2(D, E, TreesToUse, Total2),
   getScore_samevenue_tree3(D, E, TreesToUse, Total3),
   getScore_samevenue_tree4(D, E, TreesToUse, Total4),
   getScore_samevenue_tree5(D, E, TreesToUse, Total5),
   getScore_samevenue_tree6(D, E, TreesToUse, Total6),
   getScore_samevenue_tree7(D, E, TreesToUse, Total7),
   getScore_samevenue_tree8(D, E, TreesToUse, Total8),
   getScore_samevenue_tree9(D, E, TreesToUse, Total9),
   getScore_samevenue_tree10(D, E, TreesToUse, Total10),
   Total is LogPrior + Total1 + Total2 + Total3 + Total4 + Total5 + Total6 + Total7 + Total8 + Total9 + Total10,
   !.
samevenue(D, E, TreesToUse, Total) :- waitHere("This should not fail", samevenue(D, E, TreesToUse, Total)).

getScore_samevenue_tree1(D, E, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_samevenue_tree1(D, E, TreesToUse, Total1) :- samevenue_tree1(D, E, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

getScore_samevenue_tree2(D, E, TreesToUse, 0.0) :- 2 > TreesToUse, !.
getScore_samevenue_tree2(D, E, TreesToUse, Total2) :- samevenue_tree2(D, E, Total), stepLength_tree2(StepLen), Total2 is Total * StepLen.

getScore_samevenue_tree3(D, E, TreesToUse, 0.0) :- 3 > TreesToUse, !.
getScore_samevenue_tree3(D, E, TreesToUse, Total3) :- samevenue_tree3(D, E, Total), stepLength_tree3(StepLen), Total3 is Total * StepLen.

getScore_samevenue_tree4(D, E, TreesToUse, 0.0) :- 4 > TreesToUse, !.
getScore_samevenue_tree4(D, E, TreesToUse, Total4) :- samevenue_tree4(D, E, Total), stepLength_tree4(StepLen), Total4 is Total * StepLen.

getScore_samevenue_tree5(D, E, TreesToUse, 0.0) :- 5 > TreesToUse, !.
getScore_samevenue_tree5(D, E, TreesToUse, Total5) :- samevenue_tree5(D, E, Total), stepLength_tree5(StepLen), Total5 is Total * StepLen.

getScore_samevenue_tree6(D, E, TreesToUse, 0.0) :- 6 > TreesToUse, !.
getScore_samevenue_tree6(D, E, TreesToUse, Total6) :- samevenue_tree6(D, E, Total), stepLength_tree6(StepLen), Total6 is Total * StepLen.

getScore_samevenue_tree7(D, E, TreesToUse, 0.0) :- 7 > TreesToUse, !.
getScore_samevenue_tree7(D, E, TreesToUse, Total7) :- samevenue_tree7(D, E, Total), stepLength_tree7(StepLen), Total7 is Total * StepLen.

getScore_samevenue_tree8(D, E, TreesToUse, 0.0) :- 8 > TreesToUse, !.
getScore_samevenue_tree8(D, E, TreesToUse, Total8) :- samevenue_tree8(D, E, Total), stepLength_tree8(StepLen), Total8 is Total * StepLen.

getScore_samevenue_tree9(D, E, TreesToUse, 0.0) :- 9 > TreesToUse, !.
getScore_samevenue_tree9(D, E, TreesToUse, Total9) :- samevenue_tree9(D, E, Total), stepLength_tree9(StepLen), Total9 is Total * StepLen.

getScore_samevenue_tree10(D, E, TreesToUse, 0.0) :- 10 > TreesToUse, !.
getScore_samevenue_tree10(D, E, TreesToUse, Total10) :- samevenue_tree10(D, E, Total), stepLength_tree10(StepLen), Total10 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(samevenue, 20, [
   samevenue(uniqueVar6, b),
   samevenue(uniqueVar7, b),
   recursion_samevenue(uniqueVar9, b),
   samevenue(uniqueVar10, a),
   samevenue(uniqueVar3, a),
   samevenue(uniqueVar5, b),
   samevenue(uniqueVar8, b),
   samevenue(uniqueVar1, b),
   samevenue(uniqueVar2, a),
   samevenue(uniqueVar4, a),
   recursion_samevenue(uniqueVar2, b),
   recursion_samevenue(uniqueVar7, a),
   recursion_samevenue(uniqueVar10, b),
   recursion_samevenue(uniqueVar6, a),
   recursion_samevenue(uniqueVar3, b),
   recursion_samevenue(uniqueVar5, a),
   samevenue(uniqueVar9, a),
   samevenue(uniqueVar8, a),
   samevenue(uniqueVar1, a),
   samevenue(uniqueVar4, b)]).
